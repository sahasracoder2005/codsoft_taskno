import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# 🔍 Load data
df = pd.read_csv('/advertising.csv')

print("📊 Dataset Preview:")
display(df.head())

# 🧹 Clean data
df.dropna(inplace=True)

X = df.drop('Sales', axis=1)
y = df['Sales']

# ✂️ Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 🚀 Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# 📈 Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"\n✅ Model Performance:")
print(f"🔸 Mean Squared Error: {mse:.2f}")
print(f"🔸 R² Score: {r2:.2%}")

# 📊 Plot Actual vs Predicted
plt.figure(figsize=(8,5))
sns.scatterplot(x=y_test, y=y_pred, color='teal', alpha=0.7)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("📈 Actual vs Predicted Sales")
plt.grid(True)
plt.tight_layout()
plt.show()

# 🌟 Feature Importance
importances = model.feature_importances_
features = X.columns

plt.figure(figsize=(6,4))
sns.barplot(x=importances, y=features, palette="crest")
plt.title("📌 Feature Importance")
plt.xlabel("Importance Score")
plt.tight_layout()
plt.show()

print("\n📬 Sales prediction complete. Use these insights to optimize your ad strategy!")
